package main

import (
	"crypto/tls"
	"fmt"
	"log"

	amqp "github.com/rabbitmq/amqp091-go"
)

func main() {
	// TLS-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
	tlsConfig := &tls.Config{
		InsecureSkipVerify: true,
	}

	// AMQPS URI
	amqpURL := "amqps://USERNAME:PASSWORD@IP:PORT/VHOST"

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ TLS
	conn, err := amqp.DialTLS(amqpURL, tlsConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close()
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ (TLS)")

	// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞
	ch, err := conn.Channel()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞: %v", err)
	}
	defer ch.Close()

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å
	queue := "test_queue"
	msgs, err := ch.Consume(
		queue, // –∏–º—è –æ—á–µ—Ä–µ–¥–∏
		"",    // consumer tag
		true,  // auto-ack
		false, // exclusive
		false, // no-local
		false, // no-wait
		nil,   // args
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	}

	// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	fmt.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	for msg := range msgs {
		fmt.Printf("üì® %s\n", msg.Body)
	}
}
