package main

import (
	"crypto/tls"
	"fmt"
	"log"

	"github.com/streadway/amqp"
)

func main() {
	// TLS-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	tlsConfig := &tls.Config{
		InsecureSkipVerify: true, // ‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–µ!
	}

	// URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, —Ö–æ—Å—Ç, –ø–æ—Ä—Ç 5671 (TLS)
	amqpURL := "amqps://USERNAME:PASSWORD@IP:PORT/VHOST"

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å TLS
	conn, err := amqp.DialTLS(amqpURL, tlsConfig)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ: %v", err)
	}
	defer conn.Close()
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (TLS)")

	ch, err := conn.Channel()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª: %v", err)
	}
	defer ch.Close()

	queue := "test_queue"

	msgs, err := ch.Consume(
		queue, // –∏–º—è –æ—á–µ—Ä–µ–¥–∏
		"",    // consumer tag
		true,  // auto-ack
		false, // exclusive
		false, // no-local
		false, // no-wait
		nil,   // arguments
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –æ—á–µ—Ä–µ–¥—å: %v", err)
	}

	fmt.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî Ctrl+C")
	for msg := range msgs {
		fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s\n", msg.Body)
	}
}
